// uses maven-publish to upload the artifacts to nexus
// called using /.gradlew publish
// see http://www.gradle.org/docs/current/userguide/publishing_maven.html for more details.

configure(subprojects.findAll { it.name != 'util' }) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    /* Artifacts for publishing */
    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact sourceJar
                artifact javadocJar
                // shadowJar builds the uberjar of the code from the module and all the modules it's dependent upon
                // i.e. for "driver" this includes classes for driver + driver-core + bson
                artifact shadowJar
                // if you want to only publish the module code and not the uber jar, uncomment the line below
                // from components.java

                // this adds the following details to the published pom.xml
                pom.withXml {
                    def scm = asNode().appendNode('scm')
                    scm.appendNode('url', 'https://github.com/mongodb/mongo-java-driver')
                    scm.appendNode('connection', 'scm:git:git://github.com/mongodb/mongo-java-driver')

                    def licence = asNode().appendNode('licenses').appendNode('license')
                    licence.appendNode('name', 'The Apache Software License, Version 2.0')
                    licence.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                    licence.appendNode('distribution', 'repo')

                    def developers = asNode().appendNode('developers').appendNode('developer')
                    developers.appendNode('name', 'Various')
                    developers.appendNode('organization', '10gen')

                    // for some reason, when building with the shadowJar, the pom is generated with a "packaging" node with a "pom" value
                    // we're going to remove this node as if we were following the default for publishing, this would not exist
                    // alternatively, you can use the code to alter it.value to 'jar'
                    asNode().packaging.findAll() {
                        it.replaceNode {}
                    }

                }
            }
        }
    }

    publishing {
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    url 'https://oss.sonatype.org/content/repositories/snapshots'
                } else {
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                }

                credentials {
                    username project.properties.sonatypeUsername
                    password project.properties.sonatypePassword
                }
            }
        }
    }
}

//
// Configure the specific values for the published pom files for each project
//
project(':bson') {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    asNode().appendNode('name', 'BSON')
                    asNode().appendNode('description', 'The BSON libs')
                    asNode().appendNode('url', 'http://bsonspec.org/')
                }
            }
        }
    }
}

project(':driver-core') {
    archivesBaseName = 'mongo-java-driver-core'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    asNode().appendNode('name', 'MongoDB Java Driver')
                    asNode().appendNode('description', 'The Java operations layer for the MongoDB Java Driver. Other third parties can ' +
                                                       'wrap this layer to provide custom APIs')
                    asNode().appendNode('url', 'http://www.mongodb.org')
                }
            }
        }
    }
}


project(':driver') {
    archivesBaseName = 'mongo-java-driver'

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    asNode().appendNode('name', 'MongoDB Java Driver')
                    asNode().appendNode('description', 'The MongoDB Java Driver.  Includes backwards-compatible compatible API and new ' +
                                                       'CRUD API')
                    asNode().appendNode('url', 'http://www.mongodb.org')
                }
            }
        }
    }
}
